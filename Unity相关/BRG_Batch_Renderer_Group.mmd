[Scia Reto](https://sciareto.org) mind map   
> __version__=`1.1`,showJumps=`true`
---

# Root topic

## 示例项目
- LINK
<pre>https://github.com/Unity-Technologies/brg-shooter</pre>

### BatchRendererGroup sample: High frame rate<br/> even on a budget GLES device
- LINK
<pre>https://unity.com/blog/engine-platform/batchrenderergroup-sample-high-frame-rate-on-budget-devices</pre>

#### 为什么不使用经典的<br/>Graphics\.DrawMeshInstanced?

##### 需要提供包含矩阵的托管内存数组，<br/>所以可能出现垃圾回收

###### 即使着色器不需要，反转矩阵也是CPU计算<br/>比如URP/Unlit

##### 要定义obj2world矩阵以外的任何属性，<br/>都需要自定义着色器（手写或者shader graph\)

##### 每次绘制，必须把矩阵和自定义数据上传到GPU内存，<br/>根据具体情况，可能会对性能造成巨大影响

#### 什么是BRG

##### 从C\#生成绘制命令，并生成GPU相关的绘制调用<br/>由于不使用托管内存，因此可以用Burst 编译器生成命令

#### BRG Shader Data Model

##### 使用和shader 变体对应的GPU数据布局

##### shader变体可以从标准的constan buffer（UnityPerMaterial\) <br/>或者自定义的 GPU Buffer \(BRG raw buffer\)

###### 可以自行决定怎么管理

#### Properties per instance \-Or Not

##### 可以用metadata 描述那些属性是根据实例变化的，<br/>哪些是这个shader的材质共同的

#### BRG metadata

##### 本质上每个shader 都可以设置的32位的值

###### 可选的

##### 0\-30位定义的是属性在BRG raw buffer 的偏移值

##### 第31位表示属性值是不是所有实例都是一样的<br/>或者表示offset是数组的开头，每个实例进行偏移？

##### The exact meaning of BRG metadata also depends on the shader property type\.<br/>博客有一张图汇总了各种情况

#### BRG Culling and visibility indices

##### BRG 用的是persisiten GPU 缓存

##### Visibility buffer

###### 体现在draawCommand的visibleInstances设置

#### BRG matrix format

##### 使用float3x4表示矩阵，而不是float4x4

##### 相对平常的64 bytes，只需要用48 bytes\(一个float 4byte 省了4个就是16）

#### The devil’s in the details: GLES exception

##### 大多数GLES 3\.0 设备无法在顶点动画阶段访问SSOB<br/>所以，当API是GLES的时候，BRG 会用constant buffer ,或者UBO<br/>而不是 存储raw data

###### constant buffer 可以任意大小<br/>但是当shader运行的时候 只有小部分是可见的

####### 用的时候实例多就得split 到不同的窗口

###### UBO 模式下，要用BatchRendererGroup\.GetConstantBufferMaxWindowSize\(\)<br/>来获取BRG 窗口大小

## Trying out new Unity API: BatchRendererGroup
> leftSide=`true`

- LINK
<pre>https://gamedev.center/trying-out-new-unity-api-batchrenderergroup/</pre>

### BRG 数据是按列存储，Matrix4x4是按行存
